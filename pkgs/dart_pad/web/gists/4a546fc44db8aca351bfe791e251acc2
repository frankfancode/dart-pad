{
  "url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2",
  "forks_url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2/forks",
  "commits_url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2/commits",
  "id": "4a546fc44db8aca351bfe791e251acc2",
  "node_id": "G_kwDOBTngO9oAIDRhNTQ2ZmM0NGRiOGFjYTM1MWJmZTc5MWUyNTFhY2My",
  "git_pull_url": "https://gist.github.com/4a546fc44db8aca351bfe791e251acc2.git",
  "git_push_url": "https://gist.github.com/4a546fc44db8aca351bfe791e251acc2.git",
  "html_url": "https://gist.github.com/flutterdevrelgists/4a546fc44db8aca351bfe791e251acc2",
  "files": {
    "main.dart": {
      "filename": "main.dart",
      "type": "application/vnd.dart",
      "language": "Dart",
      "raw_url": "https://gist.githubusercontent.com/flutterdevrelgists/4a546fc44db8aca351bfe791e251acc2/raw/65f9efaa193e26717419fda4ee8fc261cd5f36cd/main.dart",
      "size": 16906,
      "truncated": false,
      "content": "// Copyright 2013 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'dart:math' as math;\n\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:english_words/english_words.dart';\n\nvoid main() {\n  runApp(MusicAppDemo());\n}\n\nclass MusicAppDemo extends StatelessWidget {\n  MusicAppDemo({Key? key}) : super(key: key);\n\n  final MusicDatabase database = MusicDatabase.mock();\n\n  final GoRouter _router = GoRouter(\n    initialLocation: '/library',\n    routes: <RouteBase>[\n      ShellRoute(\n        builder: (BuildContext context, GoRouterState state, Widget child) {\n          return MusicAppShell(\n            child: child,\n          );\n        },\n        routes: <RouteBase>[\n          GoRoute(\n            path: '/library',\n            pageBuilder: (context, state) {\n              return FadeTransitionPage(\n                child: const LibraryScreen(),\n                key: state.pageKey,\n              );\n            },\n            routes: <RouteBase>[\n              GoRoute(\n                path: 'album/:albumId',\n                builder: (BuildContext context, GoRouterState state) {\n                  return AlbumScreen(\n                    albumId: state.pathParameters['albumId'],\n                  );\n                },\n                routes: [\n                  GoRoute(\n                    path: 'song/:songId',\n                    // Display on the root Navigator\n                    builder: (BuildContext context, GoRouterState state) {\n                      return SongScreen(\n                        songId: state.pathParameters['songId']!,\n                      );\n                    },\n                  ),\n                ],\n              ),\n            ],\n          ),\n          GoRoute(\n            path: '/recents',\n            pageBuilder: (context, state) {\n              return FadeTransitionPage(\n                child: const RecentlyPlayedScreen(),\n                key: state.pageKey,\n              );\n            },\n            routes: <RouteBase>[\n              GoRoute(\n                path: 'song/:songId',\n                // Display on the root Navigator\n                builder: (BuildContext context, GoRouterState state) {\n                  return SongScreen(\n                    songId: state.pathParameters['songId']!,\n                  );\n                },\n              ),\n            ],\n          ),\n          GoRoute(\n            path: '/search',\n            pageBuilder: (context, state) {\n              final query = state.queryParameters['q'] ?? '';\n              return FadeTransitionPage(\n                child: SearchScreen(\n                  query: query,\n                ),\n                key: state.pageKey,\n              );\n            },\n          ),\n        ],\n      ),\n    ],\n  );\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      title: 'Music app',\n      theme: ThemeData(\n        colorSchemeSeed: Colors.pink,\n        useMaterial3: true,\n      ),\n      routerConfig: _router,\n      builder: (context, child) {\n        return MusicDatabaseScope(\n          state: database,\n          child: child!,\n        );\n      },\n    );\n  }\n}\n\nclass MusicAppShell extends StatelessWidget {\n  final Widget child;\n\n  const MusicAppShell({\n    Key? key,\n    required this.child,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: child,\n      bottomNavigationBar: BottomNavigationBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(Icons.my_library_music_rounded),\n            label: 'Library',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.timelapse),\n            label: 'Recently Played',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.search),\n            label: 'Search',\n          ),\n        ],\n        currentIndex: _calculateSelectedIndex(context),\n        onTap: (int idx) => _onItemTapped(idx, context),\n      ),\n    );\n  }\n\n  static int _calculateSelectedIndex(BuildContext context) {\n    final GoRouter route = GoRouter.of(context);\n    final String location = route.location;\n    if (location.startsWith('/recents')) {\n      return 1;\n    } else if (location.startsWith('/search')) {\n      return 2;\n    } else {\n      return 0;\n    }\n  }\n\n  void _onItemTapped(int index, BuildContext context) {\n    switch (index) {\n      case 1:\n        GoRouter.of(context).go('/recents');\n        break;\n      case 2:\n        GoRouter.of(context).go('/search');\n        break;\n      case 0:\n      default:\n        GoRouter.of(context).go('/library');\n        break;\n    }\n  }\n}\n\nclass LibraryScreen extends StatelessWidget {\n  const LibraryScreen({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final database = MusicDatabase.of(context);\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Library'),\n      ),\n      body: ListView.builder(\n        itemBuilder: (context, albumId) {\n          final album = database.albums[albumId];\n          return AlbumTile(\n            album: album,\n            onTap: () {\n              GoRouter.of(context).go('/library/album/$albumId');\n            },\n          );\n        },\n        itemCount: database.albums.length,\n      ),\n    );\n  }\n}\n\nclass RecentlyPlayedScreen extends StatelessWidget {\n  const RecentlyPlayedScreen({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final database = MusicDatabase.of(context);\n    final songs = database.recentlyPlayed;\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Recently Played'),\n      ),\n      body: ListView.builder(\n        itemBuilder: (context, index) {\n          final song = songs[index];\n          final albumIdInt = int.tryParse(song.albumId)!;\n          final album = database.albums[albumIdInt];\n          return SongTile(\n            album: album,\n            song: song,\n            onTap: () {\n              GoRouter.of(context).go('/recents/song/${song.fullId}');\n            },\n          );\n        },\n        itemCount: songs.length,\n      ),\n    );\n  }\n}\n\nclass SearchScreen extends StatefulWidget {\n  final String query;\n\n  const SearchScreen({Key? key, required this.query}) : super(key: key);\n\n  @override\n  State<SearchScreen> createState() => _SearchScreenState();\n}\n\nclass _SearchScreenState extends State<SearchScreen> {\n  String? _currentQuery;\n\n  @override\n  Widget build(BuildContext context) {\n    final database = MusicDatabase.of(context);\n    final songs = database.search(widget.query);\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Search'),\n      ),\n      body: Column(\n        children: [\n          Padding(\n            padding: const EdgeInsets.all(12.0),\n            child: TextField(\n              decoration: const InputDecoration(\n                hintText: 'Search...',\n                border: OutlineInputBorder(),\n              ),\n              onChanged: (String? newSearch) {\n                _currentQuery = newSearch;\n              },\n              onEditingComplete: () {\n                GoRouter.of(context).go(\n                  '/search?q=$_currentQuery',\n                );\n              },\n            ),\n          ),\n          Expanded(\n            child: ListView.builder(\n              itemBuilder: (context, index) {\n                final song = songs[index];\n                return SongTile(\n                  album: database.albums[int.tryParse(song.albumId)!],\n                  song: song,\n                  onTap: () {\n                    GoRouter.of(context).go(\n                        '/library/album/${song.albumId}/song/${song.fullId}');\n                  },\n                );\n              },\n              itemCount: songs.length,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass AlbumScreen extends StatelessWidget {\n  final String? albumId;\n\n  const AlbumScreen({\n    required this.albumId,\n    Key? key,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final database = MusicDatabase.of(context);\n    final albumIdInt = int.tryParse(albumId ?? '');\n    final album = database.albums[albumIdInt!];\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Album - ${album.title}'),\n      ),\n      body: Center(\n        child: Column(\n          children: [\n            Row(\n              children: [\n                SizedBox(\n                  width: 200,\n                  height: 200,\n                  child: Container(\n                    color: album.color,\n                    margin: const EdgeInsets.all(8),\n                  ),\n                ),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      album.title,\n                      style: Theme.of(context).textTheme.headlineMedium,\n                    ),\n                    Text(\n                      album.artist,\n                      style: Theme.of(context).textTheme.titleMedium,\n                    ),\n                  ],\n                ),\n              ],\n            ),\n            Expanded(\n              child: ListView.builder(\n                itemBuilder: (context, index) {\n                  final song = album.songs[index];\n                  return ListTile(\n                    title: Text(song.title),\n                    leading: SizedBox(\n                      width: 50,\n                      height: 50,\n                      child: Container(\n                        color: album.color,\n                        margin: const EdgeInsets.all(8),\n                      ),\n                    ),\n                    trailing: SongDuration(\n                      duration: song.duration,\n                    ),\n                    onTap: () {\n                      GoRouter.of(context)\n                          .go('/library/album/$albumId/song/${song.fullId}');\n                    },\n                  );\n                },\n                itemCount: album.songs.length,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass SongScreen extends StatelessWidget {\n  final String songId;\n\n  const SongScreen({\n    Key? key,\n    required this.songId,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final database = MusicDatabase.of(context);\n    final song = database.getSongById(songId);\n    final albumIdInt = int.tryParse(song.albumId);\n    final album = database.albums[albumIdInt!];\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Song - ${song.title}'),\n      ),\n      body: Column(\n        children: [\n          Row(\n            children: [\n              SizedBox(\n                width: 300,\n                height: 300,\n                child: Container(\n                  color: album.color,\n                  margin: const EdgeInsets.all(8),\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.all(16.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      song.title,\n                      style: Theme.of(context).textTheme.displayMedium,\n                    ),\n                    Text(\n                      album.title,\n                      style: Theme.of(context).textTheme.titleMedium,\n                    ),\n                  ],\n                ),\n              )\n            ],\n          )\n        ],\n      ),\n    );\n  }\n}\n\nclass MusicDatabase {\n  final List<Album> albums;\n  final List<Song> recentlyPlayed;\n  final Map<String, Song> _allSongs = {};\n\n  MusicDatabase(this.albums, this.recentlyPlayed) {\n    _populateAllSongs();\n  }\n\n  factory MusicDatabase.mock() {\n    final albums = _mockAlbums().toList();\n    final recentlyPlayed = _mockRecentlyPlayed(albums).toList();\n    return MusicDatabase(albums, recentlyPlayed);\n  }\n\n  Song getSongById(String songId) {\n    if (_allSongs.containsKey(songId)) {\n      return _allSongs[songId]!;\n    }\n    throw ('No song with ID $songId found.');\n  }\n\n  List<Song> search(String searchString) {\n    final songs = <Song>[];\n    for (var song in _allSongs.values) {\n      final album = albums[int.tryParse(song.albumId)!];\n      if (song.title.contains(searchString) ||\n          album.title.contains(searchString)) {\n        songs.add(song);\n      }\n    }\n    return songs;\n  }\n\n  void _populateAllSongs() {\n    for (var album in albums) {\n      for (var song in album.songs) {\n        _allSongs[song.fullId] = song;\n      }\n    }\n  }\n\n  static MusicDatabase of(BuildContext context) {\n    final routeStateScope =\n        context.dependOnInheritedWidgetOfExactType<MusicDatabaseScope>();\n    if (routeStateScope == null) throw ('No RouteState in scope!');\n    return routeStateScope.state;\n  }\n\n  static Iterable<Album> _mockAlbums() sync* {\n    for (var i = 0; i < Colors.primaries.length; i++) {\n      final color = Colors.primaries[i];\n      final title = WordPair.random().toString();\n      final artist = WordPair.random().toString();\n      final songs = <Song>[];\n      for (var j = 0; j < 12; j++) {\n        final minutes = math.Random().nextInt(3) + 3;\n        final seconds = math.Random().nextInt(60);\n        final title = WordPair.random();\n        final duration = Duration(minutes: minutes, seconds: seconds);\n        final song = Song('$j', '$i', '$title', duration);\n\n        songs.add(song);\n      }\n      yield Album('$i', title, artist, color, songs);\n    }\n  }\n\n  static Iterable<Song> _mockRecentlyPlayed(List<Album> albums) sync* {\n    for (var album in albums) {\n      final songIndex = math.Random().nextInt(album.songs.length);\n      yield album.songs[songIndex];\n    }\n  }\n}\n\nclass MusicDatabaseScope extends InheritedWidget {\n  final MusicDatabase state;\n\n  const MusicDatabaseScope({\n    required this.state,\n    required Widget child,\n    Key? key,\n  }) : super(child: child, key: key);\n\n  @override\n  bool updateShouldNotify(covariant InheritedWidget oldWidget) {\n    return oldWidget is MusicDatabaseScope && state != oldWidget.state;\n  }\n}\n\nclass Album {\n  final String id;\n  final String title;\n  final String artist;\n  final Color color;\n  final List<Song> songs;\n\n  Album(this.id, this.title, this.artist, this.color, this.songs);\n}\n\nclass Song {\n  final String id;\n  final String albumId;\n  final String title;\n  final Duration duration;\n\n  Song(this.id, this.albumId, this.title, this.duration);\n\n  String get fullId => '$albumId-$id';\n}\n\nclass AlbumTile extends StatelessWidget {\n  final Album album;\n  final VoidCallback? onTap;\n\n  const AlbumTile({Key? key, required this.album, this.onTap})\n      : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      leading: SizedBox(\n        width: 50,\n        height: 50,\n        child: Container(\n          color: album.color,\n        ),\n      ),\n      title: Text(album.title),\n      subtitle: Text(album.artist),\n      onTap: onTap,\n    );\n  }\n}\n\nclass SongTile extends StatelessWidget {\n  final Album album;\n  final Song song;\n  final VoidCallback? onTap;\n\n  const SongTile(\n      {Key? key, required this.album, required this.song, this.onTap})\n      : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      leading: SizedBox(\n        width: 50,\n        height: 50,\n        child: Container(\n          color: album.color,\n          margin: const EdgeInsets.all(8),\n        ),\n      ),\n      title: Text(song.title),\n      trailing: SongDuration(\n        duration: song.duration,\n      ),\n      onTap: onTap,\n    );\n  }\n}\n\nclass SongDuration extends StatelessWidget {\n  final Duration duration;\n\n  const SongDuration({\n    required this.duration,\n    Key? key,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n        '${duration.inMinutes.toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}');\n  }\n}\n\n/// A page that fades in an out.\nclass FadeTransitionPage extends CustomTransitionPage<void> {\n  /// Creates a [FadeTransitionPage].\n  FadeTransitionPage({\n    required LocalKey key,\n    required Widget child,\n  }) : super(\n            key: key,\n            transitionsBuilder: (BuildContext context,\n                    Animation<double> animation,\n                    Animation<double> secondaryAnimation,\n                    Widget child) =>\n                FadeTransition(\n                  opacity: animation.drive(_curveTween),\n                  child: child,\n                ),\n            child: child);\n\n  static final CurveTween _curveTween = CurveTween(curve: Curves.easeIn);\n}"
    },
    "readme.md": {
      "filename": "readme.md",
      "type": "text/markdown",
      "language": "Markdown",
      "raw_url": "https://gist.githubusercontent.com/flutterdevrelgists/4a546fc44db8aca351bfe791e251acc2/raw/d56fc5b249fc3abc33e3877d400e43a8325b8999/readme.md",
      "size": 76,
      "truncated": false,
      "content": "# GoRouter sample\n\nCreated with <3 with [dartpad.dev](https://dartpad.dev).\n"
    }
  },
  "public": false,
  "created_at": "2022-09-27T16:23:35Z",
  "updated_at": "2023-07-27T17:22:22Z",
  "description": "GoRouter sample",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2/comments",
  "owner": {
    "login": "flutterdevrelgists",
    "id": 87679035,
    "node_id": "MDQ6VXNlcjg3Njc5MDM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/flutterdevrelgists",
    "html_url": "https://github.com/flutterdevrelgists",
    "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
    "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
    "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
    "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
    "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
    "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
    "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [
    {
      "url": "https://api.github.com/gists/3e7d11f543bc058112bea5c146e37b94",
      "user": {
        "login": "oravecz",
        "id": 297712,
        "node_id": "MDQ6VXNlcjI5NzcxMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/297712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/oravecz",
        "html_url": "https://github.com/oravecz",
        "followers_url": "https://api.github.com/users/oravecz/followers",
        "following_url": "https://api.github.com/users/oravecz/following{/other_user}",
        "gists_url": "https://api.github.com/users/oravecz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/oravecz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/oravecz/subscriptions",
        "organizations_url": "https://api.github.com/users/oravecz/orgs",
        "repos_url": "https://api.github.com/users/oravecz/repos",
        "events_url": "https://api.github.com/users/oravecz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/oravecz/received_events",
        "type": "User",
        "site_admin": false,
        "name": "Jim Cook",
        "company": "@Transcordia ",
        "blog": "",
        "location": "Columbus, OH",
        "email": "jcook@visualxs.com",
        "hireable": null,
        "bio": null,
        "twitter_username": null,
        "public_repos": 13,
        "public_gists": 87,
        "followers": 8,
        "following": 5,
        "created_at": "2010-06-06T02:21:13Z",
        "updated_at": "2023-07-20T19:59:29Z"
      },
      "id": "3e7d11f543bc058112bea5c146e37b94",
      "created_at": "2022-10-13T19:26:51Z",
      "updated_at": "2022-10-13T19:31:16Z"
    },
    {
      "url": "https://api.github.com/gists/e2c56cebf9e5a7abdec496d91c5416cf",
      "user": {
        "login": "arnavarr",
        "id": 14583870,
        "node_id": "MDQ6VXNlcjE0NTgzODcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14583870?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arnavarr",
        "html_url": "https://github.com/arnavarr",
        "followers_url": "https://api.github.com/users/arnavarr/followers",
        "following_url": "https://api.github.com/users/arnavarr/following{/other_user}",
        "gists_url": "https://api.github.com/users/arnavarr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/arnavarr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/arnavarr/subscriptions",
        "organizations_url": "https://api.github.com/users/arnavarr/orgs",
        "repos_url": "https://api.github.com/users/arnavarr/repos",
        "events_url": "https://api.github.com/users/arnavarr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/arnavarr/received_events",
        "type": "User",
        "site_admin": false,
        "name": "Arty",
        "company": null,
        "blog": "",
        "location": null,
        "email": "arnavarr@gmail.com",
        "hireable": null,
        "bio": "Dad , Guitar Player & CISO",
        "twitter_username": "arnavarr",
        "public_repos": 23,
        "public_gists": 0,
        "followers": 4,
        "following": 185,
        "created_at": "2015-09-21T15:22:15Z",
        "updated_at": "2023-07-28T12:35:10Z"
      },
      "id": "e2c56cebf9e5a7abdec496d91c5416cf",
      "created_at": "2022-11-27T14:14:19Z",
      "updated_at": "2022-11-27T14:14:19Z"
    },
    {
      "url": "https://api.github.com/gists/5850823e0336a2aac02bdc65ec061be3",
      "user": {
        "login": "gocheory",
        "id": 23071409,
        "node_id": "MDQ6VXNlcjIzMDcxNDA5",
        "avatar_url": "https://avatars.githubusercontent.com/u/23071409?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gocheory",
        "html_url": "https://github.com/gocheory",
        "followers_url": "https://api.github.com/users/gocheory/followers",
        "following_url": "https://api.github.com/users/gocheory/following{/other_user}",
        "gists_url": "https://api.github.com/users/gocheory/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gocheory/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gocheory/subscriptions",
        "organizations_url": "https://api.github.com/users/gocheory/orgs",
        "repos_url": "https://api.github.com/users/gocheory/repos",
        "events_url": "https://api.github.com/users/gocheory/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gocheory/received_events",
        "type": "User",
        "site_admin": false,
        "name": null,
        "company": null,
        "blog": "",
        "location": null,
        "email": null,
        "hireable": null,
        "bio": null,
        "twitter_username": null,
        "public_repos": 0,
        "public_gists": 0,
        "followers": 0,
        "following": 1,
        "created_at": "2016-10-26T07:11:36Z",
        "updated_at": "2023-07-05T09:39:34Z"
      },
      "id": "5850823e0336a2aac02bdc65ec061be3",
      "created_at": "2023-01-27T17:24:54Z",
      "updated_at": "2023-01-27T17:24:54Z"
    },
    {
      "url": "https://api.github.com/gists/59decfa7dabd0e155eeafed21fe4810b",
      "user": {
        "login": "karbonnanroid",
        "id": 120489398,
        "node_id": "U_kgDOBy6Ftg",
        "avatar_url": "https://avatars.githubusercontent.com/u/120489398?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/karbonnanroid",
        "html_url": "https://github.com/karbonnanroid",
        "followers_url": "https://api.github.com/users/karbonnanroid/followers",
        "following_url": "https://api.github.com/users/karbonnanroid/following{/other_user}",
        "gists_url": "https://api.github.com/users/karbonnanroid/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/karbonnanroid/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/karbonnanroid/subscriptions",
        "organizations_url": "https://api.github.com/users/karbonnanroid/orgs",
        "repos_url": "https://api.github.com/users/karbonnanroid/repos",
        "events_url": "https://api.github.com/users/karbonnanroid/events{/privacy}",
        "received_events_url": "https://api.github.com/users/karbonnanroid/received_events",
        "type": "User",
        "site_admin": false,
        "name": "CASPER",
        "company": null,
        "blog": "",
        "location": "prague",
        "email": "karbonnanroid@gmail.com",
        "hireable": null,
        "bio": null,
        "twitter_username": null,
        "public_repos": 25,
        "public_gists": 0,
        "followers": 1,
        "following": 24,
        "created_at": "2022-12-13T15:30:09Z",
        "updated_at": "2023-04-13T14:29:13Z"
      },
      "id": "59decfa7dabd0e155eeafed21fe4810b",
      "created_at": "2023-03-18T09:21:35Z",
      "updated_at": "2023-04-12T17:09:02Z"
    },
    {
      "url": "https://api.github.com/gists/6587199d7eed228d0f9455871940cb90",
      "user": {
        "login": "Luxxxxa",
        "id": 118350027,
        "node_id": "U_kgDOBw3gyw",
        "avatar_url": "https://avatars.githubusercontent.com/u/118350027?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Luxxxxa",
        "html_url": "https://github.com/Luxxxxa",
        "followers_url": "https://api.github.com/users/Luxxxxa/followers",
        "following_url": "https://api.github.com/users/Luxxxxa/following{/other_user}",
        "gists_url": "https://api.github.com/users/Luxxxxa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Luxxxxa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Luxxxxa/subscriptions",
        "organizations_url": "https://api.github.com/users/Luxxxxa/orgs",
        "repos_url": "https://api.github.com/users/Luxxxxa/repos",
        "events_url": "https://api.github.com/users/Luxxxxa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Luxxxxa/received_events",
        "type": "User",
        "site_admin": false,
        "name": null,
        "company": null,
        "blog": "",
        "location": null,
        "email": null,
        "hireable": null,
        "bio": null,
        "twitter_username": null,
        "public_repos": 0,
        "public_gists": 1,
        "followers": 0,
        "following": 0,
        "created_at": "2022-11-16T09:56:18Z",
        "updated_at": "2023-06-21T08:54:17Z"
      },
      "id": "6587199d7eed228d0f9455871940cb90",
      "created_at": "2023-06-12T11:59:57Z",
      "updated_at": "2023-06-12T11:59:57Z"
    }
  ],
  "history": [
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "6b410ecf8ee9e46a17c065cca3d69ef6948380df",
      "committed_at": "2023-07-27T17:22:22Z",
      "change_status": {
        "total": 36,
        "additions": 20,
        "deletions": 16
      },
      "url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2/6b410ecf8ee9e46a17c065cca3d69ef6948380df"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "1e39e4bf575e9843457006cc46bf9dc19b7c2f35",
      "committed_at": "2023-05-02T18:31:02Z",
      "change_status": {
        "total": 11,
        "additions": 6,
        "deletions": 5
      },
      "url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2/1e39e4bf575e9843457006cc46bf9dc19b7c2f35"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "9ea098bb7693623254d94c2bd61fd7091e8494e9",
      "committed_at": "2022-10-20T01:56:32Z",
      "change_status": {
        "total": 7,
        "additions": 5,
        "deletions": 2
      },
      "url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2/9ea098bb7693623254d94c2bd61fd7091e8494e9"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "0e67b884c7858f42e845b69076aafc6bcaa4b7e8",
      "committed_at": "2022-09-27T16:23:35Z",
      "change_status": {
        "total": 621,
        "additions": 621,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/4a546fc44db8aca351bfe791e251acc2/0e67b884c7858f42e845b69076aafc6bcaa4b7e8"
    }
  ],
  "truncated": false
}
