{
  "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8",
  "forks_url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/forks",
  "commits_url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/commits",
  "id": "ecabed4a17a3aad8bee7c6327e472fc8",
  "node_id": "G_kwDOBTngO9oAIGVjYWJlZDRhMTdhM2FhZDhiZWU3YzYzMjdlNDcyZmM4",
  "git_pull_url": "https://gist.github.com/ecabed4a17a3aad8bee7c6327e472fc8.git",
  "git_push_url": "https://gist.github.com/ecabed4a17a3aad8bee7c6327e472fc8.git",
  "html_url": "https://gist.github.com/flutterdevrelgists/ecabed4a17a3aad8bee7c6327e472fc8",
  "files": {
    "main.dart": {
      "filename": "main.dart",
      "type": "application/vnd.dart",
      "language": "Dart",
      "raw_url": "https://gist.githubusercontent.com/flutterdevrelgists/ecabed4a17a3aad8bee7c6327e472fc8/raw/76b3a321ce39667125620a06549e7a7a795b2154/main.dart",
      "size": 34985,
      "truncated": false,
      "content": "import 'dart:html' as html;\nimport 'dart:math';\nimport 'dart:ui';\nimport 'package:collection/collection.dart';\nimport 'package:flame/components.dart';\nimport 'package:flame/effects.dart';\nimport 'package:flame/camera.dart';\nimport 'package:flame/extensions.dart';\nimport 'package:flame/game.dart';\nimport 'package:flame/input.dart';\nimport 'package:flame/palette.dart';\nimport 'package:flame_forge2d/flame_forge2d.dart' hide Particle, World;\nimport 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart' hide Image, Gradient;\nimport 'package:flutter/services.dart';\nimport 'package:google_fonts/google_fonts.dart';\n\n// NOTE: Be patient, it might take a few seconds for it to load after you have\n// pressed the run button and it will just display a black screen meanwhile.\n\nvoid main() {\n  runApp(\n    const PadracingWidget(),\n  );\n}\n\nfinal List<Map<LogicalKeyboardKey, LogicalKeyboardKey>> playersKeys = [\n  {\n    LogicalKeyboardKey.arrowUp: LogicalKeyboardKey.arrowUp,\n    LogicalKeyboardKey.arrowDown: LogicalKeyboardKey.arrowDown,\n    LogicalKeyboardKey.arrowLeft: LogicalKeyboardKey.arrowLeft,\n    LogicalKeyboardKey.arrowRight: LogicalKeyboardKey.arrowRight,\n  },\n  {\n    LogicalKeyboardKey.keyW: LogicalKeyboardKey.arrowUp,\n    LogicalKeyboardKey.keyS: LogicalKeyboardKey.arrowDown,\n    LogicalKeyboardKey.keyA: LogicalKeyboardKey.arrowLeft,\n    LogicalKeyboardKey.keyD: LogicalKeyboardKey.arrowRight,\n  },\n];\n\nclass PadRacingGame extends Forge2DGame with KeyboardEvents {\n  static const String description = '''\n     This is an example game that uses Forge2D to handle the physics.\n     In this game you should finish 3 laps in as little time as possible, it can\n     be played as single player or with two players (on the same keyboard).\n     Watch out for the balls, they make your car spin.\n  ''';\n\n  PadRacingGame() : super(gravity: Vector2.zero(), zoom: 1);\n\n  @override\n  Color backgroundColor() => Colors.black;\n\n  static Vector2 trackSize = Vector2.all(500);\n  static double playZoom = 8.0;\n  static const int numberOfLaps = 3;\n  late final World cameraWorld;\n  late CameraComponent startCamera;\n  late List<Map<LogicalKeyboardKey, LogicalKeyboardKey>> activeKeyMaps;\n  late List<Set<LogicalKeyboardKey>> pressedKeySets;\n  final cars = <Car>[];\n  bool isGameOver = true;\n  Car? winner;\n  double _timePassed = 0;\n\n  @override\n  Future<void> onLoad() async {\n    children.register<CameraComponent>();\n    cameraWorld = World();\n    add(cameraWorld);\n\n    final walls = createWalls(trackSize);\n    final bigBall = Ball(position: Vector2(200, 245), isMovable: false);\n    cameraWorld.addAll([\n      LapLine(1, Vector2(25, 50), Vector2(50, 5), false),\n      LapLine(2, Vector2(25, 70), Vector2(50, 5), false),\n      LapLine(3, Vector2(52.5, 25), Vector2(5, 50), true),\n      bigBall,\n      ...walls,\n      ...createBalls(trackSize, walls, bigBall),\n    ]);\n\n    openMenu();\n  }\n\n  void openMenu() {\n    overlays.add('menu');\n    final zoomLevel = min(\n      canvasSize.x / trackSize.x,\n      canvasSize.y / trackSize.y,\n    );\n    startCamera = CameraComponent(\n      world: cameraWorld,\n    )\n      ..viewfinder.position = trackSize / 2\n      ..viewfinder.anchor = Anchor.center\n      ..viewfinder.zoom = zoomLevel - 0.2;\n    add(startCamera);\n  }\n\n  void prepareStart({required int numberOfPlayers}) {\n    startCamera.viewfinder\n      ..add(\n        ScaleEffect.to(\n          Vector2.all(playZoom),\n          EffectController(duration: 1.0),\n          onComplete: () => start(numberOfPlayers: numberOfPlayers),\n        ),\n      )\n      ..add(\n        MoveEffect.to(\n          Vector2.all(20),\n          EffectController(duration: 1.0),\n        ),\n      );\n  }\n\n  void start({required int numberOfPlayers}) {\n    isGameOver = false;\n    overlays.remove('menu');\n    startCamera.removeFromParent();\n    final isHorizontal = canvasSize.x > canvasSize.y;\n    Vector2 alignedVector({\n      required double longMultiplier,\n      double shortMultiplier = 1.0,\n    }) {\n      return Vector2(\n        isHorizontal\n            ? canvasSize.x * longMultiplier\n            : canvasSize.x * shortMultiplier,\n        !isHorizontal\n            ? canvasSize.y * longMultiplier\n            : canvasSize.y * shortMultiplier,\n      );\n    }\n\n    final viewportSize = alignedVector(longMultiplier: 1 / numberOfPlayers);\n\n    RectangleComponent viewportRimGenerator() =>\n        RectangleComponent(size: viewportSize, anchor: Anchor.topLeft)\n          ..paint.color = GameColors.blue.color\n          ..paint.strokeWidth = 2.0\n          ..paint.style = PaintingStyle.stroke;\n    final cameras = List.generate(numberOfPlayers, (i) {\n      return CameraComponent(\n        world: cameraWorld,\n        viewport: FixedSizeViewport(viewportSize.x, viewportSize.y)\n          ..position = alignedVector(\n            longMultiplier: i == 0 ? 0.0 : 1 / (i + 1),\n            shortMultiplier: 0.0,\n          )\n          ..add(viewportRimGenerator()),\n      )\n        ..viewfinder.anchor = Anchor.center\n        ..viewfinder.zoom = playZoom;\n    });\n\n    final mapCameraSize = Vector2.all(500);\n    const mapCameraZoom = 0.5;\n    final mapCameras = List.generate(numberOfPlayers, (i) {\n      return CameraComponent(\n        world: cameraWorld,\n        viewport: FixedSizeViewport(mapCameraSize.x, mapCameraSize.y)\n          ..position = Vector2(\n            viewportSize.x - mapCameraSize.x * mapCameraZoom - 50,\n            50,\n          ),\n      )\n        ..viewfinder.anchor = Anchor.topLeft\n        ..viewfinder.zoom = mapCameraZoom;\n    });\n    addAll(cameras);\n\n    for (var i = 0; i < numberOfPlayers; i++) {\n      final car = Car(playerNumber: i, cameraComponent: cameras[i]);\n      final lapText = LapText(\n        car: car,\n        position: Vector2.all(100),\n      );\n\n      car.lapNotifier.addListener(() {\n        if (car.lapNotifier.value > numberOfLaps) {\n          isGameOver = true;\n          winner = car;\n          overlays.add('gameover');\n          lapText.addAll([\n            ScaleEffect.by(\n              Vector2.all(1.5),\n              EffectController(duration: 0.2, alternate: true, repeatCount: 3),\n            ),\n            RotateEffect.by(pi * 2, EffectController(duration: 0.5)),\n          ]);\n        } else {\n          lapText.add(\n            ScaleEffect.by(\n              Vector2.all(1.5),\n              EffectController(duration: 0.2, alternate: true),\n            ),\n          );\n        }\n      });\n      cars.add(car);\n      cameraWorld.add(car);\n      cameras[i].viewport.addAll([lapText, mapCameras[i]]);\n    }\n\n    pressedKeySets = List.generate(numberOfPlayers, (_) => {});\n    activeKeyMaps = List.generate(numberOfPlayers, (i) => playersKeys[i]);\n  }\n\n  @override\n  void update(double dt) {\n    super.update(dt);\n    if (isGameOver) {\n      return;\n    }\n    _timePassed += dt;\n  }\n\n  @override\n  KeyEventResult onKeyEvent(\n    RawKeyEvent event,\n    Set<LogicalKeyboardKey> keysPressed,\n  ) {\n    super.onKeyEvent(event, keysPressed);\n    if (!isLoaded || isGameOver) {\n      return KeyEventResult.ignored;\n    }\n\n    _clearPressedKeys();\n    for (final key in keysPressed) {\n      activeKeyMaps.forEachIndexed((i, keyMap) {\n        if (keyMap.containsKey(key)) {\n          pressedKeySets[i].add(keyMap[key]!);\n        }\n      });\n    }\n    return KeyEventResult.handled;\n  }\n\n  void _clearPressedKeys() {\n    for (final pressedKeySet in pressedKeySets) {\n      pressedKeySet.clear();\n    }\n  }\n\n  void reset() {\n    _clearPressedKeys();\n    for (final keyMap in activeKeyMaps) {\n      keyMap.clear();\n    }\n    _timePassed = 0;\n    overlays.remove('gameover');\n    openMenu();\n    for (final car in cars) {\n      car.removeFromParent();\n    }\n    for (final camera in children.query<CameraComponent>()) {\n      camera.removeFromParent();\n    }\n  }\n\n  String _maybePrefixZero(int number) {\n    if (number < 10) {\n      return '0$number';\n    }\n    return number.toString();\n  }\n\n  String get timePassed {\n    final minutes = _maybePrefixZero((_timePassed / 60).floor());\n    final seconds = _maybePrefixZero((_timePassed % 60).floor());\n    final ms = _maybePrefixZero(((_timePassed % 1) * 100).floor());\n    return [minutes, seconds, ms].join(':');\n  }\n}\n\nclass Ball extends BodyComponent<PadRacingGame> with ContactCallbacks {\n  final double radius;\n  final Vector2 position;\n  final double rotation;\n  final bool isMovable;\n  final rng = Random();\n  late final Paint _shaderPaint;\n\n  Ball({\n    required this.position,\n    this.radius = 80.0,\n    this.rotation = 1.0,\n    this.isMovable = true,\n  }) : super(priority: 3);\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n    renderBody = false;\n    _shaderPaint = GameColors.green.paint\n      ..shader = Gradient.radial(\n        Offset.zero,\n        radius,\n        [\n          GameColors.green.color,\n          BasicPalette.black.color,\n        ],\n        null,\n        TileMode.clamp,\n        null,\n        Offset(radius / 2, radius / 2),\n      );\n  }\n\n  @override\n  Body createBody() {\n    final def = BodyDef()\n      ..userData = this\n      ..type = isMovable ? BodyType.dynamic : BodyType.kinematic\n      ..position = position;\n    final body = world.createBody(def)..angularVelocity = rotation;\n\n    final shape = CircleShape()..radius = radius;\n    final fixtureDef = FixtureDef(shape)\n      ..restitution = 0.5\n      ..friction = 0.5;\n    return body..createFixture(fixtureDef);\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawCircle(Offset.zero, radius, _shaderPaint);\n  }\n\n  @override\n  void beginContact(Object other, Contact contact) {\n    if (isMovable && other is Car) {\n      final carBody = other.body;\n      carBody.applyAngularImpulse(3 * carBody.mass * 100);\n    }\n  }\n\n  late Rect asRect = Rect.fromCircle(\n    center: position.toOffset(),\n    radius: radius,\n  );\n}\n\nList<Ball> createBalls(Vector2 trackSize, List<Wall> walls, Ball bigBall) {\n  final balls = <Ball>[];\n  final rng = Random();\n  while (balls.length < 20) {\n    final ball = Ball(\n      position: Vector2.random(rng)..multiply(trackSize),\n      radius: 3.0 + rng.nextInt(5),\n      rotation: (rng.nextBool() ? 1 : -1) * rng.nextInt(5).toDouble(),\n    );\n    final touchesBall = ball.position.distanceTo(bigBall.position) <\n        ball.radius + bigBall.radius;\n    if (!touchesBall) {\n      final touchesWall =\n          walls.any((wall) => wall.asRect.overlaps(ball.asRect));\n      if (!touchesWall) {\n        balls.add(ball);\n      }\n    }\n  }\n  return balls;\n}\n\nclass Car extends BodyComponent<PadRacingGame> {\n  Car({required this.playerNumber, required this.cameraComponent})\n      : super(\n          priority: 3,\n          paint: Paint()..color = colors[playerNumber],\n        );\n\n  static final colors = [\n    GameColors.green.color,\n    GameColors.blue.color,\n  ];\n\n  late final List<Tire> tires;\n  final ValueNotifier<int> lapNotifier = ValueNotifier<int>(1);\n  final int playerNumber;\n  final Set<LapLine> passedStartControl = {};\n  final CameraComponent cameraComponent;\n  late final Image _image;\n  final size = const Size(6, 10);\n  final scale = 10.0;\n  late final _renderPosition = -size.toOffset() / 2;\n  late final _scaledRect = (size * scale).toRect();\n  late final _renderRect = _renderPosition & size;\n\n  final vertices = <Vector2>[\n    Vector2(1.5, -5.0),\n    Vector2(3.0, -2.5),\n    Vector2(2.8, 0.5),\n    Vector2(1.0, 5.0),\n    Vector2(-1.0, 5.0),\n    Vector2(-2.8, 0.5),\n    Vector2(-3.0, -2.5),\n    Vector2(-1.5, -5.0),\n  ];\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    final recorder = PictureRecorder();\n    final canvas = Canvas(recorder, _scaledRect);\n    final path = Path();\n    final bodyPaint = Paint()..color = paint.color;\n    for (var i = 0.0; i < _scaledRect.width / 4; i++) {\n      bodyPaint.color = bodyPaint.color.darken(0.1);\n      path.reset();\n      final offsetVertices = vertices\n          .map(\n            (v) =>\n                v.toOffset() * scale -\n                Offset(i * v.x.sign, i * v.y.sign) +\n                _scaledRect.bottomRight / 2,\n          )\n          .toList();\n      path.addPolygon(offsetVertices, true);\n      canvas.drawPath(path, bodyPaint);\n    }\n    final picture = recorder.endRecording();\n    _image = await picture.toImage(\n      _scaledRect.width.toInt(),\n      _scaledRect.height.toInt(),\n    );\n  }\n\n  @override\n  Body createBody() {\n    final startPosition =\n        Vector2(20, 30) + Vector2(15, 0) * playerNumber.toDouble();\n    final def = BodyDef()\n      ..type = BodyType.dynamic\n      ..position = startPosition;\n    final body = world.createBody(def)\n      ..userData = this\n      ..angularDamping = 3.0;\n\n    final shape = PolygonShape()..set(vertices);\n    final fixtureDef = FixtureDef(shape)\n      ..density = 0.2\n      ..restitution = 2.0;\n    body.createFixture(fixtureDef);\n\n    final jointDef = RevoluteJointDef()\n      ..bodyA = body\n      ..enableLimit = true\n      ..lowerAngle = 0.0\n      ..upperAngle = 0.0\n      ..localAnchorB.setZero();\n\n    tires = List.generate(4, (i) {\n      final isFrontTire = i <= 1;\n      final isLeftTire = i.isEven;\n      return Tire(\n        car: this,\n        pressedKeys: gameRef.pressedKeySets[playerNumber],\n        isFrontTire: isFrontTire,\n        isLeftTire: isLeftTire,\n        jointDef: jointDef,\n        isTurnableTire: isFrontTire,\n      );\n    });\n\n    gameRef.cameraWorld.addAll(tires);\n    return body;\n  }\n\n  @override\n  void update(double dt) {\n    cameraComponent.viewfinder.position = body.position;\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawImageRect(\n      _image,\n      _scaledRect,\n      _renderRect,\n      paint,\n    );\n  }\n\n  @override\n  void onRemove() {\n    for (final tire in tires) {\n      tire.removeFromParent();\n    }\n  }\n}\n\nenum GameColors {\n  green,\n  blue,\n}\n\nextension GameColorExtension on GameColors {\n  Color get color {\n    switch (this) {\n      case GameColors.green:\n        return ColorExtension.fromRGBHexString('#14F596');\n      case GameColors.blue:\n        return ColorExtension.fromRGBHexString('#81DDF9');\n    }\n  }\n\n  Paint get paint => Paint()..color = color;\n}\n\nclass GameOver extends StatelessWidget {\n  const GameOver(this.game, {super.key});\n\n  final PadRacingGame game;\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    return Material(\n      color: Colors.transparent,\n      child: Center(\n        child: Wrap(\n          children: [\n            MenuCard(\n              children: [\n                Text(\n                  'Player ${game.winner!.playerNumber + 1} wins!',\n                  style: textTheme.displayLarge,\n                ),\n                const SizedBox(height: 10),\n                Text(\n                  'Time: ${game.timePassed}',\n                  style: textTheme.bodyLarge,\n                ),\n                const SizedBox(height: 10),\n                TextButton(\n                  onPressed: game.reset,\n                  child: const Text('Restart'),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass LapLine extends BodyComponent with ContactCallbacks {\n  LapLine(this.id, this.position, this.size, this.isFinish)\n      : super(priority: 1);\n\n  final int id;\n  final bool isFinish;\n  final Vector2 position;\n  final Vector2 size;\n  late final Rect rect = size.toRect();\n  Image? _finishOverlay;\n\n  @override\n  Future<void> onLoad() async {\n    super.onLoad();\n    if (isFinish) {\n      _finishOverlay = await createFinishOverlay();\n    }\n  }\n\n  @override\n  Body createBody() {\n    paint.color = (isFinish ? GameColors.green.color : GameColors.green.color)\n      ..withOpacity(0.5);\n    paint\n      ..style = PaintingStyle.fill\n      ..shader = Gradient.radial(\n        (size / 2).toOffset(),\n        max(size.x, size.y),\n        [\n          paint.color,\n          Colors.black,\n        ],\n      );\n\n    final groundBody = world.createBody(\n      BodyDef(\n        position: position,\n        userData: this,\n      ),\n    );\n    final shape = PolygonShape()..setAsBoxXY(size.x / 2, size.y / 2);\n    final fixtureDef = FixtureDef(shape, isSensor: true);\n    return groundBody..createFixture(fixtureDef);\n  }\n\n  late final Rect _scaledRect = (size * 10).toRect();\n  late final Rect _drawRect = size.toRect();\n\n  Future<Image> createFinishOverlay() async {\n    final recorder = PictureRecorder();\n    final canvas = Canvas(recorder, _scaledRect);\n    final step = _scaledRect.width / 2;\n    final black = BasicPalette.black.paint();\n\n    for (var i = 0; i * step < _scaledRect.height; i++) {\n      canvas.drawRect(\n        Rect.fromLTWH(i.isEven ? 0 : step, i * step, step, step),\n        black,\n      );\n    }\n    final picture = recorder.endRecording();\n    return picture.toImage(\n      _scaledRect.width.toInt(),\n      _scaledRect.height.toInt(),\n    );\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.translate(-size.x / 2, -size.y / 2);\n    canvas.drawRect(rect, paint);\n    if (_finishOverlay != null) {\n      canvas.drawImageRect(_finishOverlay!, _scaledRect, _drawRect, paint);\n    }\n  }\n\n  @override\n  void beginContact(Object other, Contact contact) {\n    if (other is! Car) {\n      return;\n    }\n    if (isFinish && other.passedStartControl.length == 2) {\n      other.lapNotifier.value++;\n      other.passedStartControl.clear();\n    } else if (!isFinish) {\n      other.passedStartControl\n          .removeWhere((passedControl) => passedControl.id > id);\n      other.passedStartControl.add(this);\n    }\n  }\n}\n\nclass LapText extends PositionComponent with HasGameRef<PadRacingGame> {\n  LapText({required this.car, required Vector2 position})\n      : super(position: position);\n\n  final Car car;\n  late final ValueNotifier<int> lapNotifier = car.lapNotifier;\n  late final TextComponent _timePassedComponent;\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n    final textStyle = GoogleFonts.vt323(\n      fontSize: 35,\n      color: car.paint.color,\n    );\n    final defaultRenderer = TextPaint(style: textStyle);\n    final lapCountRenderer = TextPaint(\n      style: textStyle.copyWith(fontSize: 55, fontWeight: FontWeight.bold),\n    );\n    add(\n      TextComponent(\n        text: 'Lap',\n        position: Vector2(0, -20),\n        anchor: Anchor.center,\n        textRenderer: defaultRenderer,\n      ),\n    );\n    final lapCounter = TextComponent(\n      position: Vector2(0, 10),\n      anchor: Anchor.center,\n      textRenderer: lapCountRenderer,\n    );\n    add(lapCounter);\n    void updateLapText() {\n      if (lapNotifier.value <= PadRacingGame.numberOfLaps) {\n        final prefix = lapNotifier.value < 10 ? '0' : '';\n        lapCounter.text = '$prefix${lapNotifier.value}';\n      } else {\n        lapCounter.text = 'DONE';\n      }\n    }\n\n    _timePassedComponent = TextComponent(\n      position: Vector2(0, 70),\n      anchor: Anchor.center,\n      textRenderer: defaultRenderer,\n    );\n    add(_timePassedComponent);\n\n    _backgroundPaint = Paint()\n      ..color = car.paint.color\n      ..style = PaintingStyle.stroke\n      ..strokeWidth = 2;\n\n    lapNotifier.addListener(updateLapText);\n    updateLapText();\n  }\n\n  @override\n  void update(double dt) {\n    if (gameRef.isGameOver) {\n      return;\n    }\n    _timePassedComponent.text = gameRef.timePassed;\n  }\n\n  final _backgroundRect = RRect.fromRectAndRadius(\n    Rect.fromCircle(center: Offset.zero, radius: 50),\n    const Radius.circular(10),\n  );\n  late final Paint _backgroundPaint;\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawRRect(_backgroundRect, _backgroundPaint);\n  }\n}\n\nclass Menu extends StatelessWidget {\n  const Menu(this.game, {super.key});\n\n  final PadRacingGame game;\n\n  @override\n  Widget build(BuildContext context) {\n    final textTheme = Theme.of(context).textTheme;\n    return Material(\n      color: Colors.transparent,\n      child: Center(\n        child: Wrap(\n          children: [\n            Column(\n              children: [\n                MenuCard(\n                  children: [\n                    Text(\n                      'PadRacing',\n                      style: textTheme.displayLarge,\n                    ),\n                    Text(\n                      'First to 3 laps win',\n                      style: textTheme.bodyLarge,\n                    ),\n                    const SizedBox(height: 10),\n                    TextButton(\n                      child: const Text('1 Player'),\n                      onPressed: () {\n                        game.prepareStart(numberOfPlayers: 1);\n                      },\n                    ),\n                    Text(\n                      'Arrow keys',\n                      style: textTheme.bodyMedium,\n                    ),\n                    const SizedBox(height: 10),\n                    TextButton(\n                      child: const Text('2 Players'),\n                      onPressed: () {\n                        game.prepareStart(numberOfPlayers: 2);\n                      },\n                    ),\n                    Text(\n                      'ASDW',\n                      style: textTheme.bodyMedium,\n                    ),\n                  ],\n                ),\n                MenuCard(\n                  children: [\n                    RichText(\n                      text: TextSpan(\n                        children: [\n                          TextSpan(\n                            text: 'Made by ',\n                            style: textTheme.bodyMedium,\n                          ),\n                          TextSpan(\n                            text: 'Lukas Klingsbo',\n                            style: textTheme.bodyMedium\n                                ?.copyWith(color: GameColors.green.color),\n                            recognizer: TapGestureRecognizer()\n                              ..onTap = () {\n                                //ignore: unsafe_html\n                                html.window.open(\n                                  'https://github.com/spydon',\n                                  '_blank',\n                                );\n                              },\n                          ),\n                        ],\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    RichText(\n                      text: TextSpan(\n                        children: [\n                          TextSpan(\n                            text: 'Checkout the ',\n                            style: textTheme.bodyMedium,\n                          ),\n                          TextSpan(\n                            text: 'repository',\n                            style: textTheme.bodyMedium\n                                ?.copyWith(color: GameColors.green.color),\n                            recognizer: TapGestureRecognizer()\n                              ..onTap = () {\n                                //ignore: unsafe_html\n                                html.window.open(\n                                  'https://github.com/flame-engine/flame/tree/main/examples/games/padracing',\n                                  '_blank',\n                                );\n                              },\n                          ),\n                        ],\n                      ),\n                    ),\n                  ],\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass MenuCard extends StatelessWidget {\n  const MenuCard({super.key, required this.children});\n\n  final List<Widget> children;\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      color: Colors.black,\n      shadowColor: GameColors.green.color,\n      elevation: 10,\n      margin: const EdgeInsets.only(bottom: 20),\n      child: Container(\n        margin: const EdgeInsets.all(20),\n        child: Column(\n          children: children,\n        ),\n      ),\n    );\n  }\n}\n\nclass PadracingWidget extends StatelessWidget {\n  const PadracingWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final theme = ThemeData(\n      useMaterial3: true,\n      textTheme: TextTheme(\n        displayLarge: GoogleFonts.vt323(\n          fontSize: 35,\n          color: Colors.white,\n        ),\n        labelLarge: GoogleFonts.vt323(\n          fontSize: 30,\n          fontWeight: FontWeight.w500,\n        ),\n        bodyLarge: GoogleFonts.vt323(\n          fontSize: 28,\n          color: Colors.grey,\n        ),\n        bodyMedium: GoogleFonts.vt323(\n          fontSize: 18,\n          color: Colors.grey,\n        ),\n      ),\n      textButtonTheme: TextButtonThemeData(\n        style: TextButton.styleFrom(\n          foregroundColor: Colors.white,\n          minimumSize: const Size(150, 50),\n        ),\n      ),\n      inputDecorationTheme: InputDecorationTheme(\n        hoverColor: Colors.red.shade700,\n        focusedBorder: const UnderlineInputBorder(\n          borderSide: BorderSide(color: Colors.white),\n        ),\n        border: const UnderlineInputBorder(\n          borderSide: BorderSide(color: Colors.white),\n        ),\n        errorBorder: UnderlineInputBorder(\n          borderSide: BorderSide(\n            color: Colors.red.shade700,\n          ),\n        ),\n      ),\n    );\n\n    return MaterialApp(\n      title: 'PadRacing',\n      home: GameWidget<PadRacingGame>(\n        game: PadRacingGame(),\n        loadingBuilder: (context) => Center(\n          child: Text(\n            'Loading...',\n            style: Theme.of(context).textTheme.displayLarge,\n          ),\n        ),\n        overlayBuilderMap: {\n          'menu': (_, game) => Menu(game),\n          'gameover': (_, game) => GameOver(game),\n        },\n        initialActiveOverlays: const ['menu'],\n      ),\n      theme: theme,\n    );\n  }\n}\n\nclass Tire extends BodyComponent<PadRacingGame> {\n  Tire({\n    required this.car,\n    required this.pressedKeys,\n    required this.isFrontTire,\n    required this.isLeftTire,\n    required this.jointDef,\n    this.isTurnableTire = false,\n  }) : super(\n          paint: Paint()\n            ..color = car.paint.color\n            ..strokeWidth = 0.2\n            ..style = PaintingStyle.stroke,\n          priority: 2,\n        );\n\n  static const double _backTireMaxDriveForce = 300.0;\n  static const double _frontTireMaxDriveForce = 600.0;\n  static const double _backTireMaxLateralImpulse = 8.5;\n  static const double _frontTireMaxLateralImpulse = 7.5;\n\n  final Car car;\n  final size = Vector2(0.5, 1.25);\n  late final RRect _renderRect = RRect.fromLTRBR(\n    -size.x,\n    -size.y,\n    size.x,\n    size.y,\n    const Radius.circular(0.3),\n  );\n\n  final Set<LogicalKeyboardKey> pressedKeys;\n\n  late final double _maxDriveForce =\n      isFrontTire ? _frontTireMaxDriveForce : _backTireMaxDriveForce;\n  late final double _maxLateralImpulse =\n      isFrontTire ? _frontTireMaxLateralImpulse : _backTireMaxLateralImpulse;\n\n  // Make mutable if ice or something should be implemented\n  final double _currentTraction = 1.0;\n\n  final double _maxForwardSpeed = 250.0;\n  final double _maxBackwardSpeed = -40.0;\n\n  final RevoluteJointDef jointDef;\n  late final RevoluteJoint joint;\n  final bool isTurnableTire;\n  final bool isFrontTire;\n  final bool isLeftTire;\n\n  final double _lockAngle = 0.6;\n  final double _turnSpeedPerSecond = 4;\n\n  final Paint _black = BasicPalette.black.paint();\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n    gameRef.cameraWorld.add(Trail(car: car, tire: this));\n  }\n\n  @override\n  Body createBody() {\n    final jointAnchor = isFrontTire\n        ? Vector2(isLeftTire ? -3.0 : 3.0, 3.5)\n        : Vector2(isLeftTire ? -3.0 : 3.0, -4.25);\n\n    final def = BodyDef()\n      ..type = BodyType.dynamic\n      ..position = car.body.position + jointAnchor;\n    final body = world.createBody(def)..userData = this;\n\n    final polygonShape = PolygonShape()..setAsBoxXY(0.5, 1.25);\n    body.createFixtureFromShape(polygonShape, 1.0).userData = this;\n\n    jointDef.bodyB = body;\n    jointDef.localAnchorA.setFrom(jointAnchor);\n    world.createJoint(joint = RevoluteJoint(jointDef));\n    joint.setLimits(0, 0);\n    return body;\n  }\n\n  @override\n  void update(double dt) {\n    if (body.isAwake || pressedKeys.isNotEmpty) {\n      _updateTurn(dt);\n      _updateFriction();\n      if (!gameRef.isGameOver) {\n        _updateDrive();\n      }\n    }\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawRRect(_renderRect, _black);\n    canvas.drawRRect(_renderRect, paint);\n  }\n\n  void _updateFriction() {\n    final impulse = _lateralVelocity\n      ..scale(-body.mass)\n      ..clampScalar(-_maxLateralImpulse, _maxLateralImpulse)\n      ..scale(_currentTraction);\n    body.applyLinearImpulse(impulse);\n    body.applyAngularImpulse(\n      0.1 * _currentTraction * body.getInertia() * -body.angularVelocity,\n    );\n\n    final currentForwardNormal = _forwardVelocity;\n    final currentForwardSpeed = currentForwardNormal.length;\n    currentForwardNormal.normalize();\n    final dragForceMagnitude = -2 * currentForwardSpeed;\n    body.applyForce(\n      currentForwardNormal..scale(_currentTraction * dragForceMagnitude),\n    );\n  }\n\n  void _updateDrive() {\n    var desiredSpeed = 0.0;\n    if (pressedKeys.contains(LogicalKeyboardKey.arrowUp)) {\n      desiredSpeed = _maxForwardSpeed;\n    }\n    if (pressedKeys.contains(LogicalKeyboardKey.arrowDown)) {\n      desiredSpeed += _maxBackwardSpeed;\n    }\n\n    final currentForwardNormal = body.worldVector(Vector2(0.0, 1.0));\n    final currentSpeed = _forwardVelocity.dot(currentForwardNormal);\n    var force = 0.0;\n    if (desiredSpeed < currentSpeed) {\n      force = -_maxDriveForce;\n    } else if (desiredSpeed > currentSpeed) {\n      force = _maxDriveForce;\n    }\n\n    if (force.abs() > 0) {\n      body.applyForce(currentForwardNormal..scale(_currentTraction * force));\n    }\n  }\n\n  void _updateTurn(double dt) {\n    var desiredAngle = 0.0;\n    var desiredTorque = 0.0;\n    var isTurning = false;\n    if (pressedKeys.contains(LogicalKeyboardKey.arrowLeft)) {\n      desiredTorque = -15.0;\n      desiredAngle = -_lockAngle;\n      isTurning = true;\n    }\n    if (pressedKeys.contains(LogicalKeyboardKey.arrowRight)) {\n      desiredTorque += 15.0;\n      desiredAngle += _lockAngle;\n      isTurning = true;\n    }\n    if (isTurnableTire && isTurning) {\n      final turnPerTimeStep = _turnSpeedPerSecond * dt;\n      final angleNow = joint.jointAngle();\n      final angleToTurn =\n          (desiredAngle - angleNow).clamp(-turnPerTimeStep, turnPerTimeStep);\n      final angle = angleNow + angleToTurn;\n      joint.setLimits(angle, angle);\n    } else {\n      joint.setLimits(0, 0);\n    }\n    body.applyTorque(desiredTorque);\n  }\n\n  // Cached Vectors to reduce unnecessary object creation.\n  final Vector2 _worldLeft = Vector2(1.0, 0.0);\n  final Vector2 _worldUp = Vector2(0.0, -1.0);\n\n  Vector2 get _lateralVelocity {\n    final currentRightNormal = body.worldVector(_worldLeft);\n    return currentRightNormal\n      ..scale(currentRightNormal.dot(body.linearVelocity));\n  }\n\n  Vector2 get _forwardVelocity {\n    final currentForwardNormal = body.worldVector(_worldUp);\n    return currentForwardNormal\n      ..scale(currentForwardNormal.dot(body.linearVelocity));\n  }\n}\n\nclass Trail extends Component with HasPaint {\n  Trail({\n    required this.car,\n    required this.tire,\n  }) : super(priority: 1);\n\n  final Car car;\n  final Tire tire;\n\n  final trail = <Offset>[];\n  final _trailLength = 30;\n\n  @override\n  Future<void> onLoad() async {\n    paint\n      ..color = (tire.paint.color.withOpacity(0.9))\n      ..strokeWidth = 1.0;\n  }\n\n  @override\n  void update(double dt) {\n    if (tire.body.linearVelocity.length2 > 100) {\n      if (trail.length > _trailLength) {\n        trail.removeAt(0);\n      }\n      final trailPoint = tire.body.position.toOffset();\n      trail.add(trailPoint);\n    } else if (trail.isNotEmpty) {\n      trail.removeAt(0);\n    }\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawPoints(PointMode.polygon, trail, paint);\n  }\n}\n\nList<Wall> createWalls(Vector2 size) {\n  final topCenter = Vector2(size.x / 2, 0);\n  final bottomCenter = Vector2(size.x / 2, size.y);\n  final leftCenter = Vector2(0, size.y / 2);\n  final rightCenter = Vector2(size.x, size.y / 2);\n\n  final filledSize = size.clone() + Vector2.all(5);\n  return [\n    Wall(topCenter, Vector2(filledSize.x, 5)),\n    Wall(leftCenter, Vector2(5, filledSize.y)),\n    Wall(Vector2(52.5, 240), Vector2(5, 380)),\n    Wall(Vector2(200, 50), Vector2(300, 5)),\n    Wall(Vector2(72.5, 300), Vector2(5, 400)),\n    Wall(Vector2(180, 100), Vector2(220, 5)),\n    Wall(Vector2(350, 105), Vector2(5, 115)),\n    Wall(Vector2(310, 160), Vector2(240, 5)),\n    Wall(Vector2(211.5, 400), Vector2(283, 5)),\n    Wall(Vector2(351, 312.5), Vector2(5, 180)),\n    Wall(Vector2(430, 302.5), Vector2(5, 290)),\n    Wall(Vector2(292.5, 450), Vector2(280, 5)),\n    Wall(bottomCenter, Vector2(filledSize.y, 5)),\n    Wall(rightCenter, Vector2(5, filledSize.y)),\n  ];\n}\n\nclass Wall extends BodyComponent<PadRacingGame> {\n  Wall(this.position, this.size) : super(priority: 3);\n\n  final Vector2 position;\n  final Vector2 size;\n\n  final Random rng = Random();\n  late final Image _image;\n\n  final scale = 10.0;\n  late final _renderPosition = -size.toOffset() / 2;\n  late final _scaledRect = (size * scale).toRect();\n  late final _renderRect = _renderPosition & size.toSize();\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    paint.color = ColorExtension.fromRGBHexString('#14F596');\n\n    final recorder = PictureRecorder();\n    final canvas = Canvas(recorder, _scaledRect);\n    final drawSize = _scaledRect.size.toVector2();\n    final center = (drawSize / 2).toOffset();\n    const step = 1.0;\n\n    canvas.drawRect(\n      Rect.fromCenter(center: center, width: drawSize.x, height: drawSize.y),\n      BasicPalette.black.paint(),\n    );\n    paint.style = PaintingStyle.stroke;\n    paint.strokeWidth = step;\n    for (var x = 0; x < 30; x++) {\n      canvas.drawRect(\n        Rect.fromCenter(center: center, width: drawSize.x, height: drawSize.y),\n        paint,\n      );\n      paint.color = paint.color.darken(0.07);\n      drawSize.x -= step;\n      drawSize.y -= step;\n    }\n    final picture = recorder.endRecording();\n    _image = await picture.toImage(\n      _scaledRect.width.toInt(),\n      _scaledRect.height.toInt(),\n    );\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawImageRect(\n      _image,\n      _scaledRect,\n      _renderRect,\n      paint,\n    );\n  }\n\n  @override\n  Body createBody() {\n    final def = BodyDef()\n      ..type = BodyType.static\n      ..position = position;\n    final body = world.createBody(def)\n      ..userData = this\n      ..angularDamping = 3.0;\n\n    final shape = PolygonShape()..setAsBoxXY(size.x / 2, size.y / 2);\n    final fixtureDef = FixtureDef(shape)..restitution = 0.5;\n    return body..createFixture(fixtureDef);\n  }\n\n  late Rect asRect = Rect.fromCenter(\n    center: position.toOffset(),\n    width: size.x,\n    height: size.y,\n  );\n}\n//ignore_for_file: avoid_web_libraries_in_flutter"
    },
    "readme.md": {
      "filename": "readme.md",
      "type": "text/markdown",
      "language": "Markdown",
      "raw_url": "https://gist.githubusercontent.com/flutterdevrelgists/ecabed4a17a3aad8bee7c6327e472fc8/raw/bae0ff63da91da53c2348bf7f94a0d3ded6df158/readme.md",
      "size": 85,
      "truncated": false,
      "content": "# PadRacing DartPad sample\n\nCreated with <3 with [dartpad.dev](https://dartpad.dev).\n"
    }
  },
  "public": false,
  "created_at": "2022-05-19T17:06:51Z",
  "updated_at": "2023-07-25T20:24:41Z",
  "description": "PadRacing DartPad sample",
  "comments": 0,
  "user": null,
  "comments_url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/comments",
  "owner": {
    "login": "flutterdevrelgists",
    "id": 87679035,
    "node_id": "MDQ6VXNlcjg3Njc5MDM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/flutterdevrelgists",
    "html_url": "https://github.com/flutterdevrelgists",
    "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
    "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
    "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
    "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
    "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
    "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
    "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
    "type": "User",
    "site_admin": false
  },
  "forks": [
    {
      "url": "https://api.github.com/gists/8bf184ad3d01f8aaeb54c134b3274ad1",
      "user": {
        "login": "timmaffett",
        "id": 3639881,
        "node_id": "MDQ6VXNlcjM2Mzk4ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3639881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/timmaffett",
        "html_url": "https://github.com/timmaffett",
        "followers_url": "https://api.github.com/users/timmaffett/followers",
        "following_url": "https://api.github.com/users/timmaffett/following{/other_user}",
        "gists_url": "https://api.github.com/users/timmaffett/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/timmaffett/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/timmaffett/subscriptions",
        "organizations_url": "https://api.github.com/users/timmaffett/orgs",
        "repos_url": "https://api.github.com/users/timmaffett/repos",
        "events_url": "https://api.github.com/users/timmaffett/events{/privacy}",
        "received_events_url": "https://api.github.com/users/timmaffett/received_events",
        "type": "User",
        "site_admin": false,
        "name": "Tim Maffett",
        "company": null,
        "blog": "",
        "location": null,
        "email": "timmaffett@gmail.com",
        "hireable": true,
        "bio": "Coding, Compassion and Kindness",
        "twitter_username": "timmaffett",
        "public_repos": 112,
        "public_gists": 7,
        "followers": 3,
        "following": 7,
        "created_at": "2013-02-19T18:49:46Z",
        "updated_at": "2023-06-23T21:39:17Z"
      },
      "id": "8bf184ad3d01f8aaeb54c134b3274ad1",
      "created_at": "2022-06-14T05:36:12Z",
      "updated_at": "2022-06-14T05:36:31Z"
    },
    {
      "url": "https://api.github.com/gists/50a2ea4a99e721b3f83a0ca5bb440732",
      "user": {
        "login": "FXschwartz",
        "id": 16527593,
        "node_id": "MDQ6VXNlcjE2NTI3NTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/16527593?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FXschwartz",
        "html_url": "https://github.com/FXschwartz",
        "followers_url": "https://api.github.com/users/FXschwartz/followers",
        "following_url": "https://api.github.com/users/FXschwartz/following{/other_user}",
        "gists_url": "https://api.github.com/users/FXschwartz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FXschwartz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FXschwartz/subscriptions",
        "organizations_url": "https://api.github.com/users/FXschwartz/orgs",
        "repos_url": "https://api.github.com/users/FXschwartz/repos",
        "events_url": "https://api.github.com/users/FXschwartz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FXschwartz/received_events",
        "type": "User",
        "site_admin": false,
        "name": "Preston Schwartz",
        "company": "@360labs @Rogue-Recruitment @saturn5 @flowline",
        "blog": "",
        "location": "Eden Prairie MN",
        "email": "preston.schwartz505@gmail.com",
        "hireable": true,
        "bio": null,
        "twitter_username": null,
        "public_repos": 42,
        "public_gists": 6,
        "followers": 10,
        "following": 3,
        "created_at": "2016-01-03T16:27:22Z",
        "updated_at": "2023-07-24T18:39:45Z"
      },
      "id": "50a2ea4a99e721b3f83a0ca5bb440732",
      "created_at": "2022-07-03T17:49:36Z",
      "updated_at": "2022-07-03T17:49:37Z"
    },
    {
      "url": "https://api.github.com/gists/6490a81ffc0e4f40dfdf3fc3b778e822",
      "user": {
        "login": "RoninHood525",
        "id": 121695030,
        "node_id": "U_kgDOB0DrNg",
        "avatar_url": "https://avatars.githubusercontent.com/u/121695030?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RoninHood525",
        "html_url": "https://github.com/RoninHood525",
        "followers_url": "https://api.github.com/users/RoninHood525/followers",
        "following_url": "https://api.github.com/users/RoninHood525/following{/other_user}",
        "gists_url": "https://api.github.com/users/RoninHood525/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/RoninHood525/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/RoninHood525/subscriptions",
        "organizations_url": "https://api.github.com/users/RoninHood525/orgs",
        "repos_url": "https://api.github.com/users/RoninHood525/repos",
        "events_url": "https://api.github.com/users/RoninHood525/events{/privacy}",
        "received_events_url": "https://api.github.com/users/RoninHood525/received_events",
        "type": "User",
        "site_admin": false,
        "name": null,
        "company": null,
        "blog": "",
        "location": null,
        "email": null,
        "hireable": null,
        "bio": null,
        "twitter_username": null,
        "public_repos": 1,
        "public_gists": 0,
        "followers": 0,
        "following": 0,
        "created_at": "2022-12-30T20:59:21Z",
        "updated_at": "2022-12-30T20:59:21Z"
      },
      "id": "6490a81ffc0e4f40dfdf3fc3b778e822",
      "created_at": "2022-12-30T21:00:46Z",
      "updated_at": "2022-12-30T21:00:46Z"
    },
    {
      "url": "https://api.github.com/gists/305a0743a285ffa53157a86905b0bc2f",
      "user": {
        "login": "divyanshu12165",
        "id": 72546695,
        "node_id": "MDQ6VXNlcjcyNTQ2Njk1",
        "avatar_url": "https://avatars.githubusercontent.com/u/72546695?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/divyanshu12165",
        "html_url": "https://github.com/divyanshu12165",
        "followers_url": "https://api.github.com/users/divyanshu12165/followers",
        "following_url": "https://api.github.com/users/divyanshu12165/following{/other_user}",
        "gists_url": "https://api.github.com/users/divyanshu12165/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/divyanshu12165/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/divyanshu12165/subscriptions",
        "organizations_url": "https://api.github.com/users/divyanshu12165/orgs",
        "repos_url": "https://api.github.com/users/divyanshu12165/repos",
        "events_url": "https://api.github.com/users/divyanshu12165/events{/privacy}",
        "received_events_url": "https://api.github.com/users/divyanshu12165/received_events",
        "type": "User",
        "site_admin": false,
        "name": "Divyanshu Gangwar",
        "company": "Ducat Noida ",
        "blog": "",
        "location": "Noida",
        "email": null,
        "hireable": null,
        "bio": "I am a software developer I am looking for job in android development currently I have completed  core java and  Android industrial training from  DUCAT NOIDA..",
        "twitter_username": "DivyanshuGang11",
        "public_repos": 1,
        "public_gists": 0,
        "followers": 0,
        "following": 0,
        "created_at": "2020-10-08T08:20:12Z",
        "updated_at": "2023-04-03T12:06:39Z"
      },
      "id": "305a0743a285ffa53157a86905b0bc2f",
      "created_at": "2023-03-29T03:48:41Z",
      "updated_at": "2023-03-29T03:48:42Z"
    }
  ],
  "history": [
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "f8e02f0ae1b812f1ef062df446d15cca3fd51fa3",
      "committed_at": "2023-07-25T20:24:41Z",
      "change_status": {
        "total": 15,
        "additions": 8,
        "deletions": 7
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/f8e02f0ae1b812f1ef062df446d15cca3fd51fa3"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "45759ad673c557736f1c38d73d4e14131ddb6ea2",
      "committed_at": "2023-06-08T17:05:07Z",
      "change_status": {
        "total": 2,
        "additions": 1,
        "deletions": 1
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/45759ad673c557736f1c38d73d4e14131ddb6ea2"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "ec21b9becdc90b5401a637c27cf28828d011f315",
      "committed_at": "2022-10-20T01:43:07Z",
      "change_status": {
        "total": 30,
        "additions": 15,
        "deletions": 15
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/ec21b9becdc90b5401a637c27cf28828d011f315"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "876fe14320b7bbc8370bd5779066e9f07b6224a8",
      "committed_at": "2022-10-18T19:30:58Z",
      "change_status": {
        "total": 10,
        "additions": 7,
        "deletions": 3
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/876fe14320b7bbc8370bd5779066e9f07b6224a8"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "c9c6e1a1f4a6da3d45cf80a4e9ef6d7fd69357ca",
      "committed_at": "2022-06-15T06:48:56Z",
      "change_status": {
        "total": 3,
        "additions": 3,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/c9c6e1a1f4a6da3d45cf80a4e9ef6d7fd69357ca"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "540dae2688e7412392c010aa200c3f05de8cea4f",
      "committed_at": "2022-06-15T06:47:14Z",
      "change_status": {
        "total": 322,
        "additions": 153,
        "deletions": 169
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/540dae2688e7412392c010aa200c3f05de8cea4f"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "26dad3c375e747aa696f7c811999002481e7f4f3",
      "committed_at": "2022-05-28T08:27:10Z",
      "change_status": {
        "total": 0,
        "additions": 0,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/26dad3c375e747aa696f7c811999002481e7f4f3"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "63c34397dea5832f18b0c0ccc9388ef69dfce800",
      "committed_at": "2022-05-28T08:22:17Z",
      "change_status": {
        "total": 116,
        "additions": 61,
        "deletions": 55
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/63c34397dea5832f18b0c0ccc9388ef69dfce800"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "39bff6319eddf25e26663ab30c3bd4362120f16e",
      "committed_at": "2022-05-28T08:16:40Z",
      "change_status": {
        "total": 0,
        "additions": 0,
        "deletions": 0
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/39bff6319eddf25e26663ab30c3bd4362120f16e"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "07cb64c2f4e8755d1cb6453f2cd3ab967fbd8dd3",
      "committed_at": "2022-05-28T08:16:21Z",
      "change_status": {
        "total": 117,
        "additions": 58,
        "deletions": 59
      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/07cb64c2f4e8755d1cb6453f2cd3ab967fbd8dd3"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "b3feb0533f22c15f36235cd5cb341d8cf3bce35e",
      "committed_at": "2022-05-19T17:16:07Z",
      "change_status": {

      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/b3feb0533f22c15f36235cd5cb341d8cf3bce35e"
    },
    {
      "user": {
        "login": "flutterdevrelgists",
        "id": 87679035,
        "node_id": "MDQ6VXNlcjg3Njc5MDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/87679035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flutterdevrelgists",
        "html_url": "https://github.com/flutterdevrelgists",
        "followers_url": "https://api.github.com/users/flutterdevrelgists/followers",
        "following_url": "https://api.github.com/users/flutterdevrelgists/following{/other_user}",
        "gists_url": "https://api.github.com/users/flutterdevrelgists/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/flutterdevrelgists/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/flutterdevrelgists/subscriptions",
        "organizations_url": "https://api.github.com/users/flutterdevrelgists/orgs",
        "repos_url": "https://api.github.com/users/flutterdevrelgists/repos",
        "events_url": "https://api.github.com/users/flutterdevrelgists/events{/privacy}",
        "received_events_url": "https://api.github.com/users/flutterdevrelgists/received_events",
        "type": "User",
        "site_admin": false
      },
      "version": "a387ce491e04970c0e0b418ad745f783c58e2d17",
      "committed_at": "2022-05-19T17:06:51Z",
      "change_status": {

      },
      "url": "https://api.github.com/gists/ecabed4a17a3aad8bee7c6327e472fc8/a387ce491e04970c0e0b418ad745f783c58e2d17"
    }
  ],
  "truncated": false
}
